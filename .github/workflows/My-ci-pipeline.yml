name: Continuous Integration
on:
  push:
    paths-ignore:
      - '**.md'
      - '**.lock'
      - '.github\**'
      - '.idea\**'     
      - '.pytest_cache\**'
      - '.venv\**'
      - '.vscode\**'

  pull_request:
    paths-ignore:
      - '**.md'
      - '.github\**'
      - '.idea\**'     
      - '.vscode\**'

jobs:
  build:
    name: Build and test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: BuildTestImage
      run: docker build --target test --tag todo-app:test .
    
    - name: BuildAndTestImage
      run: docker run --env-file .env.test todo-app:test tests

  Publish:
    #if: ${{ github.ref == 'refs/heads/master' && github.event_name == 'pull_request' }}
    #if: ${{ github.ref == 'refs/heads/module10' && github.event_name == 'push' }}
    name: Publish
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - uses: actions/checkout@v3
    
    - uses: satackey/action-docker-layer-caching@v0.0.11
      continue-on-error: true

    #- name: publish to docker hub
    #  run: echo "Publishing!"

    - name: Build Image
      run: docker build --target production --tag wishy78/todo-app:latest .

    - name: Login to Docker hub
      run: docker login --username wishy78 --password "${{ secrets.DOCKER_PASSWORD }}"

    - name: Publish to Docker hub
      run: docker push wishy78/todo-app:latest
  
  Infrastucture:
    #if: ${{ github.ref == 'refs/heads/master' && github.event_name == 'pull_request' }}
    #if: ${{ github.ref == 'refs/heads/module10' && github.event_name == 'push' }}
    name: Infrastucture_with_Terraform
    runs-on: ubuntu-latest
    needs: [Publish]
    env:
        #ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
        #ARM_TENANT_ID: ${{ secrets.TENANT_ID }}
        #ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
        #ARM_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}

        #TF_VAR_SECRET_KEY: ${{ secrets.TF_VAR_SECRET_KEY }}
        #TF_VAR_DB_NAME: ${{ secrets.TF_VAR_DB_NAME }}
        #TF_VAR_COLLECTION_NAME: ${{ secrets.TF_VAR_COLLECTION_NAME }}

        #TF_VAR_CLIENTID: ${{ secrets.TF_VAR_CLIENTID }}
        #TF_VAR_CLIENTSECRET: ${{ secrets.TF_VAR_CLIENTSECRET }}

        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}

        #TF_VAR_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        #TF_VAR_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        #TF_VAR_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        #TF_VAR_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      
        TF_VAR_CLIENTID: ${{ secrets.TF_VAR_CLIENTID }}
        TF_VAR_CLIENTSECRET: ${{ secrets.TF_VAR_CLIENTSECRET }}
        TF_VAR_DB_NAME: ${{ secrets.TF_VAR_DB_NAME }}
        TF_VAR_COLLECTION_NAME: ${{ secrets.TF_VAR_COLLECTION_NAME }}
        TF_VAR_SECRET_KEY: ${{ secrets.TF_VAR_SECRET_KEY }}
        
        #https://dev-app-jonl-ex12.azurewebsites.net
       
#https://learn.microsoft.com/en-us/azure/developer/terraform/authenticate-to-azure?tabs=bash#specify-service-principal-credentials-in-environment-variables

    steps:
    - uses: actions/checkout@v3
   
    - name: initiate Terraform
      run: terraform init 

    - name: Apply_Infrastucture_via_Terraform
      run: terraform apply -auto-approve
      env:
        WEB_HOOK: $(terraform output web_hook)
        WEBAPP_URL: $(terraform output webapp_url)

  cd:
    #if: ${{ github.ref == 'refs/heads/master' && github.event_name == 'pull_request' }}
    #if: ${{ github.ref == 'refs/heads/module10' && github.event_name == 'push' }}
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [Infrastucture]
    steps:
    - uses: actions/checkout@v3
    
    #- name: TFOutputs
    #  id: TFOutputs
    #  run: |
    #    $terraformOutput = Get-Content "$(terraformApply.jsonOutputVariablesPath)" | ConvertFrom-Json
    #    $terraformOutput | Get-Member -MemberType NoteProperty | % { $o = $terraformOutput.($_.Name); Write-Host "##vso[task.setvariable variable=$($_.Name);isoutput=true;issecret=$($o.sensitive)]$($o.value)" }
    #  shell: pwsh

#${{ steps.terraform-version-check.outputs.TERRAFORM_VERSION }} $terraformOutput

    - name: Deploy to azure
      run: |
      echo $[Infrastucture]
      echo $[Infrastucture].WEB_HOOK
      curl --fail -dH -X POST $[Infrastucture].WEB_HOOK
      #$[Infrastucture.env.WEB_HOOK]
      #${terraformOutput.web_hook}
      # ${{secrets.AZURE_WEBHOOK_URL}}

    - name: Test connection    
      run: curl --fail ${env.WEBAPP_URL}
      #https://dev-app-jonl-ex12.azurewebsites.net 

# https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#environment-files