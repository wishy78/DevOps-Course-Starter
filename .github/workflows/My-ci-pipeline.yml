name: Continuous Integration
on:
  push:
    paths-ignore:
      - '**.md'
      - '**.lock'
      - '.github\**'
      - '.idea\**'     
      - '.pytest_cache\**'
      - '.venv\**'
      - '.vscode\**'

  pull_request:
    paths-ignore:
      - '**.md'
      - '.github\**'
      - '.idea\**'     
      - '.vscode\**'

jobs:
  build:
    name: Build and test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: BuildTestImage
      run: docker build --target test --tag todo-app:test .
    
    - name: BuildAndTestImage
      run: docker run --env-file .env.test todo-app:test tests

  Publish:
    #if: ${{ github.ref == 'refs/heads/master' && github.event_name == 'pull_request' }}
    #if: ${{ github.ref == 'refs/heads/module10' && github.event_name == 'push' }}
    name: Publish
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - uses: actions/checkout@v3
    
    - uses: satackey/action-docker-layer-caching@v0.0.11
      continue-on-error: true

    #- name: publish to docker hub
    #  run: echo "Publishing!"

    - name: Build Image
      run: docker build --target production --tag wishy78/todo-app:latest .

    - name: Login to Docker hub
      run: docker login --username wishy78 --password "${{ secrets.DOCKER_PASSWORD }}"

    - name: Publish to Docker hub
      run: docker push wishy78/todo-app:latest
  
  Infrastucture:
    #if: ${{ github.ref == 'refs/heads/master' && github.event_name == 'pull_request' }}
    #if: ${{ github.ref == 'refs/heads/module10' && github.event_name == 'push' }}
    name: Infrastucture_with_Terraform
    runs-on: ubuntu-latest
    needs: [Publish]
    outputs:
      output1: ${{ steps.terraform_output.outputs.env.WEB_HOOK }}
      output2: ${{ steps.terraform_output.outputs.env.WEBAPP_URL }}
    env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      
        TF_VAR_CLIENTID: ${{ secrets.TF_VAR_CLIENTID }}
        TF_VAR_CLIENTSECRET: ${{ secrets.TF_VAR_CLIENTSECRET }}
        TF_VAR_DB_NAME: ${{ secrets.TF_VAR_DB_NAME }}
        TF_VAR_COLLECTION_NAME: ${{ secrets.TF_VAR_COLLECTION_NAME }}
        TF_VAR_SECRET_KEY: ${{ secrets.TF_VAR_SECRET_KEY }}
        
    steps:
    - uses: actions/checkout@v3
   
    - name: initiate Terraform
      run: terraform init 

    - id: terraform_output
      name: Apply_Infrastucture_via_Terraform
      run: |
        terraform apply -auto-approve
        echo "TF_OUT_WEB_HOOK=$(terraform output web_hook)" >> $GITHUB_OUTPUT
        echo "TF_OUT_WEBAPP_URL=$(terraform output webapp_url)" >> $GITHUB_OUTPUT
      
      env:
        WEB_HOOK: $(terraform output web_hook)
        WEBAPP_URL: $(terraform output webapp_url)

  cd:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [Infrastucture]
    env:
      varFromA1: $[ stageDependencies.outputs['Apply_Infrastucture_via_Terraform.web_hook'] ]
      varFromA2: $[ dependencies.outputs['Apply_Infrastucture_via_Terraform.web_hook'] ]
      varFromA3: ${TF_OUT_WEB_HOOK}
      varFromA4: ${{ Infrastucture.terraform_output.outputs.TF_OUT_WEB_HOOK }}
      varFromA5: ${{ Infrastucture.steps.terraform_output.outputs.TF_OUT_WEB_HOOK }}
    steps:
    - uses: actions/checkout@v3

    - name: Deploy to azure
      run: |
       echo "- outputA - $(varFromA1)
       echo "- outputB - $(varFromA2)
       echo "- outputC - $(varFromA3)
       echo "- outputD - $(varFromA4)
       echo "- outputE - $(varFromA5)
       echo "- output0 - $(terraform output webapp_url)"
       echo "- output1 - $[Infrastucture].web_hook"
       echo "- output2 - $[Infrastucture.web_hook]"
       echo "- output3 - $Infrastucture.web_hook"       
       echo "- output5 - $[Infrastucture].outputs"       
       echo "- secret - ${{secrets.AZURE_WEBHOOK_URL}}"
       echo "- env not local - ${{env.AZURE_WEBHOOK_URL}}"
       curl --fail -dH -X POST $(varFromA1)
      # $(output1)
      #$[Infrastucture.env.WEB_HOOK]
      #${terraformOutput.web_hook}
      # ${{secrets.AZURE_WEBHOOK_URL}}

    - name: Test connection    
      run: curl --fail ${env.WEBAPP_URL}